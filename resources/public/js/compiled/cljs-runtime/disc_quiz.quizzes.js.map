{"version":3,"sources":["disc_quiz/quizzes.cljs"],"mappings":";AAQA,AAAA,AAAA,AAAKA;AAEL,AAAA,AAAMC,AAAmBC;AAAzB,AACE,AAAMC,AAAU,AAAA,AAAYD;AAA5B,AACE,AAAI,AAAA,AAAA,AAACE,AAAyC,AAACC,AAAMF;;AACrDD;;AAEJ,AAAA,AAAMI,AAASC;AAAf,AACE,AAAA,AAAA,AAACH,AAA6B,AAACH,AAAkB,AAACO,AAAmBD;;AAEvE,AAAA,AAAME,AAAUC;AAAhB,AACE,AAAA,AAAA,AAACC,AAAID,AAAcJ;;AAErB,AAAA,AAAMM,AAAUC;AAAhB,AACE,AAACJ,AAAS,AAAA,AAAA,AAAiBI;;AAE7B,AAAA,AAACC,AAEA,AAAKD;AAAL,AACE,AAACD,AAASC","names":["disc-quiz.quizzes/available-quizzes","disc-quiz.quizzes/process-quiz-data","quiz","questions","re-frame.core/dispatch","cljs.core/first","disc-quiz.quizzes/handler","response","cljs.tools.reader.edn.read_string","disc-quiz.quizzes/load-edn","url","ajax.core.GET","disc-quiz.quizzes/get-quiz","name","re-frame.core/reg-fx"],"sourcesContent":["(ns disc-quiz.quizzes\n  (:require\n   [re-frame.core :as re-frame]\n   [cljs.tools.reader.edn :as reader]\n   [ajax.core :refer [GET]]))\n\n\n\n(def available-quizzes [\"who-said-it1\"])\n\n(defn process-quiz-data [quiz]\n  (let [questions (:questions quiz )]\n    (do (re-frame/dispatch [:set-current-question (first questions)]))\n    quiz))\n\n(defn handler [response]\n  (re-frame/dispatch [:set-quiz (process-quiz-data (reader/read-string response))]))\n\n(defn load-edn [url]\n  (GET url {:handler handler}))\n\n(defn get-quiz [name]\n  (load-edn (str \"/quizzes/\" name \".edn\")))\n\n(re-frame/reg-fx\n :update-quiz\n (fn [name]\n   (get-quiz name)))\n"]}