{"version":3,"sources":["disc_quiz/views.cljs"],"mappings":"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","names":["p__55557","map__55558","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","disc-quiz.views/router-component","router","cljs.core/deref","current-route","re_frame.core.subscribe","disc-quiz.views/update-form","k","event","re-frame.core/dispatch","disc-quiz.views/update-answered","q","a","p1__55560#","disc-quiz.views/form-input","t","state","disc-quiz.views/main-layout","body","disc-quiz.views/home-page","form-data","disc-quiz.views/quiz-index","iter__4529__auto__","s__55562","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__55564","cljs.core/chunk-buffer","i__55563","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__55561","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","quiz","disc-quiz.quizzes/available-quizzes","disc-quiz.views/handle-answer-click","cljs.core.keyword","disc-quiz.views/make-answer-button","answer","question","disc-quiz.views/result-modal","solution","next-q","correct?","cljs.core._EQ_","title","message","next-question?","main-color","secondary-color","text-color","disc-quiz.views/quiz-show","quiz-results","current-question","questions","answered-questions","next-question","p1__55565#","cljs.core.remove","cljs.core/contains?","cljs.core/set","cljs.core/keys","question-key","given-answer","notes","cljs.core/not-empty","s__55567","b__55569","i__55568","iter__55566","note","s__55571","b__55573","i__55572","iter__55570","disc-quiz.views/calc-correct","qs","ans","cljs.core.reduce","acc","fexpr__55574","disc-quiz.views/results-index","quiz-data","questions-total","answers","questions-correct","cljs.core/chunk-first"],"sourcesContent":["(ns disc-quiz.views\n  (:require\n   [disc-quiz.quizzes :as quizzes]\n   [disc-quiz.subs :as subs]\n   [disc-quiz.events :as events]\n   [re-frame.core :as re-frame]\n   ))\n\n\n(defn router-component [{:keys [router]}]\n  (let [current-route @(re-frame/subscribe [::subs/current-route])]\n    [:div\n     (when current-route\n       [(-> current-route :data :view)])]))\n\n(defn update-form [k event]\n  (re-frame/dispatch [:update-form k (-> event .-target .-value)]))\n\n(defn update-answered [q a]\n  (re-frame/dispatch [:update-answered q a]))\n\n(defn form-input [t k state]\n  [:input.input.is-info {:type t\n           :value (k state)\n           :on-change #(update-form k %)}])\n\n(defn main-layout [body]\n  [:span.main\n   [:section.hero.is-info\n    [:div.hero-body\n     [:div.container\n      [:h1.title \"Welcome to Disc Quiz\"]]]]\n   [:section.body\n    [:div.card>div.card-content\n     body]]\n   ]\n  )\n\n(defn home-page []\n  (let [form-data @(re-frame/subscribe [::subs/form-data])]\n    [main-layout\n     [:div.card>div.card-content\n      [:div.field.has-addons\n       [:label.label \"What's your name?\"]\n       (form-input \"text\" :name form-data)\n       [:button.button.is-info.is-light {:on-click #(re-frame/dispatch [::events/push-state :quizzes/index])} \"Select Quiz\"]]]]\n    ))\n\n\n(defn quiz-index []\n  [main-layout\n   [:div\n    (for [quiz quizzes/available-quizzes]\n      ^{:key quiz}\n      [:a {:on-click\n           #(re-frame/dispatch [::events/push-state\n                                :quizzes/show\n                                {:quiz-name quiz}])}\n       [:div.card>div.card-content quiz]])]])\n\n(defn handle-answer-click [q a]\n  (update-answered (keyword (:phrase q)) a)\n  )\n\n(defn make-answer-button [answer question]\n  ^{:key answer} [:div.column.is-half.has-text-centered\n                  [:div.button.is-fullwidth.is-light.is-info\n                   { :on-click #(handle-answer-click question answer)}\n                   answer]])\n\n(defn result-modal [solution answer next-q]\n  (let [correct? (= solution answer)\n        title (if correct? \"Correct!\" \"Woops!\")\n        message (if correct?\n                  (str answer \" did say that!\")\n                  (str \"Actually... \" solution \" said that!\"))\n        next-question? (some? next-q)\n        main-color (if correct? \"lightgreen\" \"#3273DC\")\n        secondary-color (if correct? \"#EFFAF3\" \"#EEF6FC\")\n        text-color (if correct? \"#257942\" \"#1D72AA\")]\n\n    [:div.modal.is-active\n     [:div.modal-card\n      [:header.modal-card-head.is-size-4.has-text-weight-bold\n       {:style {:background-color main-color\n                :color \"#FFF\"}}\n       title]\n      [:div.modal-card-body.has-text-weight-bold.is-size-3\n       {:style {:background-color secondary-color\n                :color text-color}}\n       message]\n      [:footer.modal-card-foot {:style {:background-color main-color}}\n       (if next-question?\n         [:button.button.is-right.is-info.is-light\n          {:on-click #(re-frame/dispatch [:set-current-question next-q])}\n          \"Next One ->\"]\n         [:button.button.is-right.is-info.is-light\n          {:on-click\n           #(re-frame/dispatch [::events/push-state :results/index])}\n          \"To Results!\"])]\n      ]\n     ])\n  )\n\n(defn quiz-show []\n  (let [quiz @(re-frame/subscribe [::subs/current-quiz])\n        quiz-results @(re-frame/subscribe [::subs/quiz-data])\n        current-question @(re-frame/subscribe [::subs/current-question])\n        questions (:questions quiz)\n        answered-questions (:answered quiz-results)\n        next-question (first (remove #(contains? (set (keys answered-questions)) (keyword (:phrase %))) questions))\n        question-key (keyword (:phrase current-question))\n        given-answer  (get answered-questions question-key)\n        solution (:solution current-question)\n        notes (:notes current-question)]\n    [main-layout\n     [:div.card.is-clipped\n      [:div.card-header\n       [:div.card-header-title.columns.is-centered.has-text-centered.title\n        [:div.column.is-half (:title quiz)]]]\n      [:div.card-content\n       [:div.columns\n        [:div.column.is-full.has-text-centered.is-size-3\n         (str \"\\\"\" (:phrase current-question) \"\\\"\")]]\n       (when (not-empty notes)\n         [:div {:style {:color \"grey\"}}\n          [:div.columns\n               [:div.column.is-full.has-text-centered>div\n                \"Notes:\"]]\n          [:div.columns>ul.column.has-text-centered\n           (for [note notes]\n             ^{:key note} [:li (str \"* \" note)])]])\n\n\n       [:div.columns.is-multiline.is-mobile\n        (for [answer (:answers current-question)]\n          (make-answer-button answer current-question))]]\n      (if given-answer [result-modal solution given-answer next-question]) ]\n     ]))\n\n(defn calc-correct [qs ans]\n  (reduce\n   (fn [acc q]\n     (if (= (:solution q) ((keyword (:phrase q)) ans)) (inc acc) acc )) 0 qs)\n  )\n\n(defn results-index []\n  (let [quiz @(re-frame/subscribe [::subs/current-quiz])\n        quiz-data @(re-frame/subscribe [::subs/quiz-data])\n        questions-total (count (:questions quiz))\n        answers (:answered quiz-data)\n        questions-correct (calc-correct (:questions quiz) answers)]\n    [main-layout\n     [:div.columns.is-centered\n      [:div.column.is-half\n       [:div.card\n        [:div.card-header\n         [:div.card-header-title.is-centered\n          [:div (str \"You got: \" questions-correct \" out of \" questions-total \" correct!\")]] ]\n        [:div.card-content.columns\n         [:div.column\n          [:progress.progress.is-success {:value questions-correct\n                                          :max questions-total} \"\"]]]]]]]))\n"]}